---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Blog Post - Hidratating ElasticSearch and Kibana using AWS Batch and Logstash.'

Parameters:
  Tag:
    Description: Name used to identified  values. Defaults to
    Type: String
    Default: BLOG
    MaxLength: 16
    MinLength: 4
  CidrVPC:
    Description: 'Cidr for the VPC'
    Type: String
    Default: 10.0.0.0/16
  CidrPublicSubnetA:
    Description: 'Cidr for Public Subnet A'
    Type: String
    Default: 10.0.0.0/20
  CidrPrivateSubnetA:
    Description: 'Cidr for Private Subnet A'
    Type: String
    Default: 10.0.48.0/20
  CidrPublicSubnetB:
    Description: 'Cidr for Public Subnet B'
    Type: String
    Default: 10.0.16.0/20
  CidrPrivateSubnetB:
    Description: 'Cidr for Private Subnet B'
    Type: String
    Default: 10.0.64.0/20
  CidrPublicSubnetC:
    Description: 'Cidr for Public Subnet C'
    Type: String
    Default: 10.0.32.0/20
  CidrPrivateSubnetC:
    Description: 'Cidr for Private Subnet C'
    Type: String
    Default: 10.0.80.0/20
  EnableIPv6:
    Description: 'Enable IPv6 on the  VPC'
    Type: String
    Default: No
    AllowedValues:
      - No
      - Yes
Conditions:
  ConfigureIPv6: !Equals [!Ref 'EnableIPv6', true]
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'CidrVPC'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Ref 'Tag'
  VPCv6:
    Condition: ConfigureIPv6
    Type: AWS::EC2::VPCCidrBlock
    DependsOn: VPC
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref 'VPC'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref 'Tag'
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref 'CidrPublicSubnetA'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Sub '${Tag} Public subnet A'
  PublicSubnetAIPv6:
    Condition: ConfigureIPv6
    Type: AWS::EC2::SubnetCidrBlock
    Properties:
      SubnetId: !Ref 'PublicSubnetA'
      Ipv6CidrBlock: !Join ['01', [!Select ['0', !Split ['00::/56', !Select ['0',
                !GetAtt [VPC, Ipv6CidrBlocks]]]], '::/64']]
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref 'CidrPrivateSubnetA'
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Sub '${Tag} Private subnet A'
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref 'CidrPublicSubnetB'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Sub '${Tag} Public Subnet 2'
  PublicSubnetBIPv6:
    Condition: ConfigureIPv6
    Type: AWS::EC2::SubnetCidrBlock
    Properties:
      SubnetId: !Ref 'PublicSubnetB'
      Ipv6CidrBlock: !Join ['02', [!Select ['0', !Split ['00::/56', !Select ['0',
                !GetAtt [VPC, Ipv6CidrBlocks]]]], '::/64']]
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref 'CidrPrivateSubnetB'
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Sub '${Tag} Private Subnet 2'
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Ref 'CidrPublicSubnetC'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Sub '${Tag} Public Subnet 3'
  PublicSubnetCIPv6:
    Condition: ConfigureIPv6
    Type: AWS::EC2::SubnetCidrBlock
    Properties:
      SubnetId: !Ref 'PublicSubnetC'
      Ipv6CidrBlock: !Join ['03', [!Select ['0', !Split ['00::/56', !Select ['0',
                !GetAtt [VPC, Ipv6CidrBlocks]]]], '::/64']]
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Ref 'CidrPrivateSubnetC'
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Sub '${Tag} Private Subnet 3'
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Sub '${Tag} Public'
  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Sub '${Tag} Private'
  RouteTableAssociationPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetA'
      RouteTableId: !Ref 'RouteTablePublic'
  RouteTableAssociationPrivateA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnetA'
      RouteTableId: !Ref 'RouteTablePrivate'
  RouteTableAssociationPublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetB'
      RouteTableId: !Ref 'RouteTablePublic'
  RouteTableAssociationPrivateB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnetB'
      RouteTableId: !Ref 'RouteTablePrivate'
  RouteTableAssociationPublicC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetC'
      RouteTableId: !Ref 'RouteTablePublic'
  RouteTableAssociationPrivateC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnetC'
      RouteTableId: !Ref 'RouteTablePrivate'
  RouteTablePublicInternetRouteIPv6:
    Condition: ConfigureIPv6
    Type: AWS::EC2::Route
    DependsOn:
    - VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref 'RouteTablePublic'
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref 'InternetGateway'
  RouteTablePublicInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref 'RouteTablePublic'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
  NetworkAclPublic:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Sub '${Tag} Public'
  NetworkAclPrivate:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Sub '${Tag} Private'
  SubnetNetworkAclAssociationPublicA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetA'
      NetworkAclId: !Ref 'NetworkAclPublic'
  SubnetNetworkAclAssociationPrivateA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnetA'
      NetworkAclId: !Ref 'NetworkAclPrivate'
  SubnetNetworkAclAssociationPublicB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetB'
      NetworkAclId: !Ref 'NetworkAclPublic'
  SubnetNetworkAclAssociationPrivateB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnetB'
      NetworkAclId: !Ref 'NetworkAclPrivate'
  SubnetNetworkAclAssociationPublicC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetC'
      NetworkAclId: !Ref 'NetworkAclPublic'
  SubnetNetworkAclAssociationPrivateC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnetC'
      NetworkAclId: !Ref 'NetworkAclPrivate'
  NetworkAclEntryInPublicAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAclPublic'
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryOutPublicAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAclPublic'
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryInPrivateAllowVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAclPrivate'
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryOutPrivateAllowVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAclPrivate'
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryInPublicAllowAllIPv6:
    Type: AWS::EC2::NetworkAclEntry
    Condition: ConfigureIPv6
    Properties:
      NetworkAclId: !Ref 'NetworkAclPublic'
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: false
      Ipv6CidrBlock: ::/0
  NetworkAclEntryOutPublicAllowAllIPv6:
    Type: AWS::EC2::NetworkAclEntry
    Condition: ConfigureIPv6
    Properties:
      NetworkAclId: !Ref 'NetworkAclPublic'
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: true
      Ipv6CidrBlock: ::/0
  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIP.AllocationId'
      SubnetId: !Ref PublicSubnetA
  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway
Outputs:
  VPC:
    Description: 'VPC'
    Value: !Ref VPC
    Export:
      Name: !Sub '${Tag}-VPC'
  VPCv6:
    Condition: ConfigureIPv6
    Description: 'VPCv6'
    Value: !Ref VPCv6
    Export:
      Name: !Sub '${Tag}-VPCv6'
  PublicSubnetA:
    Description: 'PublicSubnetA'
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub '${Tag}-PublicSubnetA'
  PublicSubnetB:
    Description: 'PublicSubnetB'
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub '${Tag}-PublicSubnetB'
  PublicSubnetC:
    Description: 'PublicSubnetC'
    Value: !Ref PublicSubnetC
    Export:
      Name: !Sub '${Tag}-PublicSubnetC'
  PrivateSubnetA:
    Description: 'PrivateSubnetA'
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub '${Tag}-PrivateSubnetA'
  PrivateSubnetB:
    Description: 'PrivateSubnetB'
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub '${Tag}-PrivateSubnetB'
  PrivateSubnetC:
    Description: 'PrivateSubnetC'
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Sub '${Tag}-PrivateSubnetC'
